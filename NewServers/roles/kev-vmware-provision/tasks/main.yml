---
- name: "Deploy new VM called {{ vmware_new_hostname }} with {{ vm_cpu_count }} CPUs, {{ vmware_disk_size }} HDD, {{ vmware_ram_mb }} RAM with {{ vmware_network }} network from {{ vmware_template_name }} template."
  vmware_guest:
    datacenter: "{{ vmware_datacenter }}"
    name: "{{ vmware_new_hostname }}"
    template: "{{ vmware_template_name }}"
    folder: "{{ vmware_folder }}"
    disk:
    - size_gb: "{{ vmware_disk_size }}"
      type: thin
      datastore: "{{ vmware_datastore }}"
    hardware:
      memory_mb: "{{ vmware_ram_mb }}"
      num_cpus: "{{ vm_cpu_count }}"
    networks:
    - name: "{{ vmware_network }}"
    wait_for_ip_address: yes
    state: "{{ vmware_state }}"
  register: newvminfo
  delegate_to: localhost

#	This spits out all known info about this VM if we want it.
#- name: debug newvminfo
#  debug:
#    msg: "newvminfo is {{ newvminfo }}"
#  when: newvminfo is defined

- name: debug newvminfo.instance.ipv4
  debug:
    msg: "New IP address is {{ newvminfo.instance.ipv4 }}"
  when: newvminfo.instance.ipv4 is defined
  ignore_errors: true

- name: debug newvminfo.instance.ipv4
  debug:
    msg: "New UUID is {{ newvminfo.instance.hw_product_uuid }}"
  when: newvminfo.instance.hw_product_uuid is defined
  ignore_errors: true


- name: "Using set_stats to save info from {{ vmware_new_hostname }} provisioning"
  set_stats:
    data:
      vmware_new_uuid: "{{ newvminfo.instance.hw_product_uuid }}"
      vmware_new_ip: "{{ newvminfo.instance.ipv4 }}"
      vmware_new_hostname: "{{ vmware_new_hostname }}"
    ignore_errors: true

- name: "add {{ newvminfo.instance.ipv4 }} host to group brandnewvm"
  add_host:
    name: "{{ newvminfo.instance.ipv4 }}"
    groups: brandnewvm

#- name: Update tag description
#  vmware_tag:
#    tag_name: Kev_Ansible_Tag
#    tag_description: This is a tag that was created by Ansible
#    state: present

